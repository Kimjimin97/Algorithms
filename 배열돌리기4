"""
1) 회전 순서를 정하는 함수 → dfs

2) 회전 함수

   - front 저장

   - front 위치에 back저장

   - front를 back과 바꾼다

3) 최소값을 구하는 함수

   - 행의 합 구하기 최소값 구하기
"""




N,M,K = map(int, input().split())

graphs = []

for _ in range(N):
    graphs.append(list(map(int, input().split())))

command = []
for _ in range(K):
    command.append(list(map(int, input().split())))



visited = [False]*K
orders = []
graph = [[graphs[i][j] for j in range(len(graphs[0]))] for i in range(len(graphs))]



def right(row, columns,s,back):
    global graph
    for _ in range(s):
        columns += 1
        front = graph[row][columns]
        graph[row][columns] = back
        back = front
    

    return row, columns, back

def down(row, columns,t,back):
    global graph
    # back = graph[row][columns]
    for _ in range(t):
        row += 1
        front = graph[row][columns]
        graph[row][columns] = back
        back = front

    return row, columns, back



def left(row, columns,t,back):
    global graph
    # back = graph[row][columns]

    for _ in range(t):
        columns -= 1
        front = graph[row][columns]
        graph[row][columns] = back
        back = front

    return row, columns, back

def up(row, columns,t, back):
    global graph
    # back = graph[row][columns]
    for _ in range(t):
        row -= 1
        front = graph[row][columns]
        graph[row][columns] = back
        back = front
    return row, columns, back


def check_min(ngraph):
    middle_answer = float("Inf")
    for g in ngraph:
        middle_answer = min(sum(g), middle_answer)
    
    return middle_answer
    
        

answer =float("Inf")
def rotate(orders):
    global graphs
    global graph
    global answer
    graph = [[graphs[i][j] for j in range(len(graphs[0]))] for i in range(len(graphs))]
    
    for r,c,s in orders:
        row, columns= r-s-1, c-s-1
        
        for k in range(s//2+1):
            nrow, ncolumns = row+k, columns+k
            
            nrow, ncolumns, back = right(nrow, ncolumns,2*s-2*k,graph[nrow][ncolumns])
            
            nrow, ncolumns, back = down(nrow, ncolumns,2*s-2*k, back  )
            
            nrow, ncolumns , back= left(nrow, ncolumns,2*s-2*k, back )
            
            nrow, ncolumns , back= up(nrow, ncolumns,2*s-2*k, back )
    
    
    return check_min(graph)

def set_order(L):
    global visited
    global orders
    global answer
    if L == K:
        answer = min(answer,rotate(orders))
        return
    
    for k in range(K):
        if not visited[k]:
            visited[k] = True
            orders.append(command[k])
            set_order(L+1)
            orders.pop()
            visited[k] = False

    
set_order(0)

print(answer)
    







N,M,K =map(int, input().split())

graphs = []

for _ in range(N):
    graphs.append(list(map(int, input().split())))

commands = []
for _ in range(K):
    commands.append(list(map(int, input().split())))


graph = [[graphs[i][j] for j in range(M)] for i in range(N)]
def rotate(sx,sy,n):
    global graph
    for k in range(n//2):
        x=sx+k
        y=sy+k
        tmp = graph[x][y]
        ## 오른쪽
        for j in range(y+1, y+1+(n-1-2*k)):
            y = j
            prev_val = graph[x][y]
            graph[x][y] = tmp 
            tmp = prev_val


        ## 아래
        for i in range(x+1,x+n-2*k):
            x = i 
            prev_val = graph[x][y] 
            graph[x][y] = tmp 
            tmp = prev_val 
        
        ## 왼쪽

        for j in range(y-1,y-n+2*k,-1):
            y = j 
            prev_val = graph[x][y]
            graph[x][y] = tmp 
            tmp = prev_val

        ## 위쪽
        for i in range(x-1,x-n+2*k,-1):
            x = i 
            prev_val = graph[x][y]
            graph[x][y] = tmp 
            tmp = prev_val


        
def start(command):
    global graph
    graph = [[graphs[i][j] for j in range(M)] for i in range(N)]
    for r,c,s in command:
        rotate(r-s-1,c-s-1,2*s+1)

    res = float("Inf")
    for g in graph:
        res = min(sum(g), res)

    return res

## 순열
visited = [False]*(K)
answer = float("Inf")
command= []
def dfs(L):
    global command
    global visited
    global answer
    if len(command) == K:
        answer = min(answer,start(command))
        return
    
    for k in range(K):
        if not visited[k]:
            visited[k] = True
            command.append(commands[k])
            dfs(k) 
            command.pop()
            visited[k] = False

dfs(0)
print(answer)

from collections import deque
def solution(grid, k):

    dxy = [[0,1],[0,-1],[1,0],[-1,0]]

    graph = []
    for g in grid:
        graph.append(list(map(str, g)))

    n = len(graph)
    m = len(graph[0])

    visited = [[False]*m for _ in range(n)]
    
    answer = 100
    queue = deque()
    queue.append([0,0,k,0])
    visited[0][0] = True

    while queue:
        print(queue)
        top = queue.popleft()

        if top[0] == n-1 and top[1] == m-1:
            answer = min(answer,top[3])
            continue
        
        visited[top[0]][top[1]] = True

        if top[3] >= answer:
            continue

        for kk in range(4):
            nx, ny = top[0] +dxy[kk][0], top[1] +dxy[kk][1]
            if 0 > nx or n <= nx or 0 > ny or m <=ny:
                continue
            if visited[nx][ny]:
                continue
            if graph[nx][ny] =="#":
                continue
            
            if graph[top[0]][top[1]] == ".":
                queue.append([nx,ny,k,top[3]+1])
                if top[2] > 0:
                    queue.append([nx,ny,top[2]-1, top[3]])
            if graph[top[0]][top[1]] == "F":
                if top[2] > 0:
                    queue.append([nx,ny,top[2]-1, top[3]])
    print(answer)
    
    return answer


solution(
[".F.FFFFF.F", ".########.", ".########F", "...######F", "##.######F", "...######F", ".########F", ".########.", ".#...####F", "...#......"],6)